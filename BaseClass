-- ======================================================================
-- Copyright (c) 2019 suyougame 
-- All Rights Reserved. 

-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:

-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-- ======================================================================
--保存类类型的虚表
_in_vtbl_map = _in_vtbl_map or {}
--每创建一个新类 就递增1  保存每个类创建的顺序id
_in_ctype_count = _in_ctype_count or 0
--通过类的创建顺序id来保存每一个类
_in_ctype_map = _in_ctype_map or {}
--每创建一个新的对象 就递增1 在New中调用  保存每个对象创建的顺序id
_in_obj_ins_id = _in_obj_ins_id or 0

--保存每个类对应实例化的n个对象
_in_obj_ins_map = _in_obj_ins_map or {}
--保存每个类实例化对象的总个数
_in_obj_count_map = _in_obj_count_map or {}
--保存每个类作为不一样类的父类的个数
_be_super_count_map = _be_super_count_map or {}

local _in_vtbl_map = _in_vtbl_map
local _in_ctype_count = _in_ctype_count
local _in_ctype_map = _in_ctype_map
local _in_obj_ins_map = _in_obj_ins_map
local _in_obj_count_map = _in_obj_count_map
local _be_super_count_map = _be_super_count_map

local setmetatable = setmetatable
local debug_getinfo = debug.getinfo

local function createFunc(class, obj, ...)
	if class.super then
		createFunc(class.super, obj, ...)
	end
	if class.__init then
		class.__init(obj, ...)
	end
end

local function deleteMeFunc(self)
	if self._use_delete_method then  --是否已经调过一次DeleteMe
		return
	end
	self._use_delete_method = true

	local now_super = self._class_type 
	while now_super ~= nil do	
		if now_super.__delete then  --每一个类调__delete方法
			now_super.__delete(self)
		end
		now_super = now_super.super
	end
	lua_resM:clearReference(self)
end

function BaseClass(super, use_class_type)
	-- 生成一个类类型
	local class_type = {__init = false,
						__delete = false,
						New = nil,
						-- _id = nil,
						-- _pid = nil,
						_source = nil,
						-- _cline = nil,
						-- __is_cc_type = nil,
						super = nil,
						}
	-- 在创建对象的时候自动调用
	class_type.__init = false
	class_type.__delete = false

	_in_ctype_count = _in_ctype_count + 1
	-- class_type._id = _in_ctype_count
	-- class_type._pid = super and super._id or 0
	_in_ctype_map[_in_ctype_count] = class_type

	local cls_obj_ins_map = {}
	_in_obj_ins_map[class_type] = cls_obj_ins_map
	setmetatable(cls_obj_ins_map, {__mode = "v"})

	_in_obj_count_map[class_type] = 0

	local info = debug_getinfo(2, "Sl")
	class_type._source = info.source
	-- class_type._cline = info.currentline
	-- class_type.__is_cc_type = true
	class_type.super = super
	if _in_ctype_count == 1 then  --设置为弱引用  只需设置一次
		setmetatable(_in_ctype_map, {__mode = "v"})
		setmetatable(_in_obj_ins_map, {__mode = "k"})
		setmetatable(_in_obj_count_map, {__mode = "k"})
		setmetatable(_be_super_count_map, {__mode = "k"})
	end
	if super then  --如果有引用父类 则该对象递增1
		if _be_super_count_map[super] == nil then
			_be_super_count_map[super] = 0
		end
		_be_super_count_map[super] = _be_super_count_map[super] + 1
	end
	class_type.New = function(...)
	-- if CoVector2 == class_type then
		-- print(debug.traceback(""))
		-- if PrintFunctionCallPos then
			-- PrintFunctionCallPos(class_type._source)
		-- end
	-- end
		-- print("new====================", class_type._source)
		-- 生成一个类对象
		local obj = nil
		-- print("use_class_type = ", use_class_type)
		if not use_class_type then
			_in_obj_ins_id = _in_obj_ins_id + 1
			if class_type.__defineVar then  --一次性生成该对象所要的属性  减少消耗
				obj = class_type:__defineVar()
			else
				obj = {_class_type = class_type,
				-- _cid = class_type._id,
				_iid = _in_obj_ins_id,
				DeleteMe = nil,
				_use_delete_method = false}
			end
			local function newFunc(t, k)
				local ret = class_type[k]
				obj[k] = ret
				-- print("k = ", k, ret)
				-- -- if ret == nil then
				-- if PrintFunctionCallPos then
				-- 	if k ~= "Update" and k ~= "GetSize" and k ~= "LateUpdate" 
				-- 		and k ~= "key_release" and k ~= "key_press" and k ~= "mouse_press"
				-- 		and PrintFunctionCallPos then
				-- 		PrintFunctionCallPos(k .. "-".. (ret == nil and "nil" or "not nil"))
				-- 	end
				-- end
				-- -- end
				return ret
			end
			setmetatable(obj, {__index = newFunc})
		else
			obj = class_type
			obj._class_type = class_type
		end
		cls_obj_ins_map[_in_obj_ins_id] = obj --save here for mem debug
		_in_obj_count_map[class_type] = _in_obj_count_map[class_type] + 1
		createFunc(class_type, obj, ...)
		-- 注册一个delete方法  从最外层的类开始一层一层的调用 直到最深层的super
		obj.DeleteMe = deleteMeFunc
		return obj
	end
 --如果该类中没有的方法 则通过元表来调用父类的该方法
	if super then
		local function superFunc(t, k)
			local ret = super[k]
			class_type[k] = ret
			return ret
		end
		setmetatable(class_type, {__index = superFunc })
	end
 
	return class_type
end


